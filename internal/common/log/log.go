/*
Package log provides support for logging to stdout and stderr.

Log entries will be logged in the following format:

	timestamp hostname tag[pid]: SEVERITY Message
*/
package log

import (
	"fmt"
	"os"
	"path"
	"runtime"
	"strings"
	"sync"
	"time"

	log "github.com/Sirupsen/logrus"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//	2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

type Formatter struct {
	once *sync.Once
}

var (
	formatter = &Formatter{&sync.Once{}}
)

func (c *Formatter) Format(entry *log.Entry) ([]byte, error) {
	var strtime string
	if flag&LUTC != 0 {
		strtime = time.Now().Format(time.RFC3339)
	} else {
		strtime = time.Now().Format("2006-01-02 15:04:05")
	}
	return []byte(fmt.Sprintf("%s %s %d: [%s] %s\n", strtime, file, line, strings.ToUpper(entry.Level.String()), entry.Message)), nil
}

// tag represents the application name generating the log message. The tag
// string will appear in all log entires.
var (
	tag  string
	file string
	line int
	flag int
)

func Init(logFile, logLevel string) {
	init := func() {
		if logLevel == "" {
			logLevel = "error"
		}

		tag = os.Args[0]
		log.SetFormatter(formatter)
		SetLevel(logLevel)

		if strings.Contains(logFile, "/") {
			if err := os.MkdirAll(path.Dir(logFile), os.ModeDir); err != nil {
				Fatal(fmt.Sprintf(`create log file dir error: "%s".`, path.Dir(logFile)))
			}

			f, err := os.OpenFile(logFile, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0666)
			if err != nil {
				Fatal(fmt.Sprintf(`can not open log file: "%s".`, logFile))
			}
			log.SetOutput(f)
		} else if logFile == "stdout" {
			log.SetOutput(os.Stdout)
		} else {
			Fatal(fmt.Sprintf(`not a valid log output: "%s", bye`, logFile))
		}
	}

	formatter.once.Do(init)
}

// SetTag sets the tag.
func SetTag(t string) {
	tag = t
}

func SetFlags(flags int) {
	flag = flags
}

// SetLevel sets the log level. Valid levels are panic, fatal, error, warn, info and debug.
func SetLevel(level string) {
	lvl, err := log.ParseLevel(level)
	if err != nil {
		Fatal(fmt.Sprintf(`not a valid level: "%s", bye`, level))
	}
	log.SetLevel(lvl)
}

// Debug logs a message with severity DEBUG.
func Debug(v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Debug(fmt.Sprint(v...))
}

// Error logs a message with severity ERROR.
func Error(v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Error(fmt.Sprint(v...))
}

// Fatal logs a message with severity ERROR followed by a call to os.Exit().
func Fatal(v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Fatal(fmt.Sprint(v...))
}

// Info logs a message with severity INFO.
func Info(v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Info(fmt.Sprint(v...))
}

// Warning logs a message with severity WARNING.
func Warning(v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Warning(fmt.Sprint(v...))
}

func Debugf(format string, v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Debug(fmt.Sprintf(format, v...))
}

// Error logs a message with severity ERROR.
func Errorf(format string, v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Error(fmt.Sprintf(format, v...))
}

// Fatal logs a message with severity ERROR followed by a call to os.Exit().
func Fatalf(format string, v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Fatal(fmt.Sprintf(format, v...))
}

// Info logs a message with severity INFO.
func Infof(format string, v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Info(fmt.Sprintf(format, v...))
}

// Warning logs a message with severity WARNING.
func Warningf(format string, v ...interface{}) {
	_, file, line, _ = runtime.Caller(1)
	if flag&Lshortfile != 0 {
		file = path.Base(file)
	}
	log.Warning(fmt.Sprintf(format, v...))
}
